name: Build

on:
  release:
    types:
      - published

env:
  TARGET_IMAGE: ${{ vars.DOCKERHUB_LOGIN }}/${{ vars.DOCKERHUB_IMAGE }}

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get Node version
        id: version
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const tag = context.payload.release.tag_name;
            return tag.startsWith('v') ? tag.slice(1) : tag;

      - name: Generate tags
        id: tags
        uses: actions/github-script@v7
        env:
          NODE_VERSION: ${{ steps.version.outputs.result }}
        with:
          result-encoding: string
          script: |
            const version = process.env.NODE_VERSION;
            const [majorVersion] = version.split('.');
            const isLTS = !(majorVersion % 2);
            const tags = [version, majorVersion, ...(isLTS ? ['lts'] : []), 'latest'];
            const tagLines = tags.map(tag => `${process.env.TARGET_IMAGE}:${tag}`);
            return '-t ' + tagLines.join(' -t ');

      - name: Build Docker image
        run: |
          copy "C:\Windows\System32\msdmo.dll" msdmo.dll
          docker build ${{ steps.tags.outputs.result }} --build-arg NODE_VERSION=${{ steps.version.outputs.result }} .

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_LOGIN }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to the registry
        run: docker push -a ${{ env.TARGET_IMAGE }}
